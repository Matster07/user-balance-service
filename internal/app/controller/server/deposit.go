package server

import (
	"context"
	"encoding/json"
	"github.com/darahayes/go-boom"
	_ "github.com/matster07/user-balance-service/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/matster07/user-balance-service/internal/app/data/dto"
	"github.com/matster07/user-balance-service/internal/app/data/entity"
	"github.com/matster07/user-balance-service/internal/pkg/client/postgresql"
	"github.com/pkg/errors"
	"net/http"
)

//	@Summary      Deposit
//	@Description  Пополнение счета, а также инициализация в случае его отсутствия
//	@Tags         account
//	@Accept       json
//	@Produce      json
//  @Param        AccountDto body dto.AccDTO  true "Идентификатор счета, сумма пополнения"
//  @Success      200            {object} dto.BalanceDTO
//	@Router       /account/deposit [post]
func (h *Handler) deposit(w http.ResponseWriter, res *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	var accountDto dto.AccDTO
	err := json.NewDecoder(res.Body).Decode(&accountDto)
	if err != nil {
		boom.BadData(w, "invalid body format")
		return
	}

	tx, err := h.Begin(context.TODO())

	defer postgresql.RollbackTx(tx)

	acc, err := h.Account.FindById(accountDto.AccountId)
	balance := accountDto.Amount + acc.Balance
	if err != nil {
		if err = h.Account.Create(tx, accountDto.AccountId, accountDto.Amount, "CUSTOMER"); err != nil {
			boom.BadData(w, errors.New("failed to process transaction"))
			return
		}
	}

	err = h.Account.Update(tx, entity.Account{
		ID:      accountDto.AccountId,
		Balance: balance,
	})
	if err != nil {
		boom.BadRequest(w, errors.New("failed to update account"))
		return
	}

	err = h.Transaction.Create(tx, entity.Transaction{
		Amount:          accountDto.Amount,
		To:              accountDto.AccountId,
		TransactionType: "DEPOSIT",
	})
	if err != nil {
		boom.BadRequest(w, errors.New("failed to save transaction"))
		return
	}

	postgresql.CommitTx(tx)

	dto.ReturnBalance(w, balance)
}
